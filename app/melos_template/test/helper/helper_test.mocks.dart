// Mocks generated by Mockito 5.4.4 from annotations
// in melos_template/test/helper/helper_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:connectivity_plus/connectivity_plus.dart' as _i5;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i6;
import 'package:core_service/firebase_messaging/firebase_messaging_service.dart'
    as _i7;
import 'package:core_service/notification/notification_service_provider.dart'
    as _i8;
import 'package:melos_template/core/model/weater/weater_data/weather_data.dart'
    as _i2;
import 'package:melos_template/core/network/api_client/weather_api_client.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeatherData_0 extends _i1.SmartFake implements _i2.WeatherData {
  _FakeWeatherData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherApiClient extends _i1.Mock implements _i3.WeatherApiClient {
  @override
  _i4.Future<_i2.WeatherData> getCurrentWeather(
    String? city,
    String? apiKey,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentWeather,
          [
            city,
            apiKey,
          ],
        ),
        returnValue: _i4.Future<_i2.WeatherData>.value(_FakeWeatherData_0(
          this,
          Invocation.method(
            #getCurrentWeather,
            [
              city,
              apiKey,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.WeatherData>.value(_FakeWeatherData_0(
          this,
          Invocation.method(
            #getCurrentWeather,
            [
              city,
              apiKey,
            ],
          ),
        )),
      ) as _i4.Future<_i2.WeatherData>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i5.Connectivity {
  @override
  _i4.Stream<List<_i6.ConnectivityResult>> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i4.Stream<List<_i6.ConnectivityResult>>.empty(),
        returnValueForMissingStub:
            _i4.Stream<List<_i6.ConnectivityResult>>.empty(),
      ) as _i4.Stream<List<_i6.ConnectivityResult>>);

  @override
  _i4.Future<List<_i6.ConnectivityResult>> checkConnectivity() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i4.Future<List<_i6.ConnectivityResult>>.value(
            <_i6.ConnectivityResult>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i6.ConnectivityResult>>.value(
                <_i6.ConnectivityResult>[]),
      ) as _i4.Future<List<_i6.ConnectivityResult>>);
}

/// A class which mocks [FirebaseMessagingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseMessagingService extends _i1.Mock
    implements _i7.FirebaseMessagingService {
  @override
  _i4.Stream<dynamic> get messageStream => (super.noSuchMethod(
        Invocation.getter(#messageStream),
        returnValue: _i4.Stream<dynamic>.empty(),
        returnValueForMissingStub: _i4.Stream<dynamic>.empty(),
      ) as _i4.Stream<dynamic>);

  @override
  _i4.Stream<dynamic> get openedAppStream => (super.noSuchMethod(
        Invocation.getter(#openedAppStream),
        returnValue: _i4.Stream<dynamic>.empty(),
        returnValueForMissingStub: _i4.Stream<dynamic>.empty(),
      ) as _i4.Stream<dynamic>);

  @override
  _i4.Stream<String> get tokenStream => (super.noSuchMethod(
        Invocation.getter(#tokenStream),
        returnValue: _i4.Stream<String>.empty(),
        returnValueForMissingStub: _i4.Stream<String>.empty(),
      ) as _i4.Stream<String>);

  @override
  _i4.Future<String?> get token => (super.noSuchMethod(
        Invocation.getter(#token),
        returnValue: _i4.Future<String?>.value(),
        returnValueForMissingStub: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> requestPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> subscribeToTopic(String? topic) => (super.noSuchMethod(
        Invocation.method(
          #subscribeToTopic,
          [topic],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> unsubscribeFromTopic(String? topic) => (super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromTopic,
          [topic],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteToken() => (super.noSuchMethod(
        Invocation.method(
          #deleteToken,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i8.NotificationService {
  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> showNotification({
    int? id = 0,
    String? title,
    String? body,
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showNotification,
          [],
          {
            #id: id,
            #title: title,
            #body: body,
            #payload: payload,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> showSchedueledNotification({
    required DateTime? scheduledDate,
    int? id = 0,
    String? title,
    String? body,
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showSchedueledNotification,
          [],
          {
            #scheduledDate: scheduledDate,
            #id: id,
            #title: title,
            #body: body,
            #payload: payload,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
